name: E2E Tests for PRs, Pushes, and Dispatch Events Backend

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - E2E_Tests_App_Next_Dispatch_Backend

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # Step 1: Setup Node.js (Explicit versioning, Node.js 20 or higher)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Step 2: Checkout the e2e-tests Repository
      - name: Checkout e2e-tests Repository
        uses: actions/checkout@v4
        with:
          path: ./ # Place the e2e-tests repository in the root directory

      # Step 3: Cache Node.js modules for e2e-tests
      - name: Cache Node.js modules for e2e-tests
        uses: actions/cache@v3
        with:
          path: node_modules
          key: e2e-tests-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-node-20
          restore-keys: |
            e2e-tests-${{ runner.os }}-
            e2e-tests-
            node_modules

      # Step x: Add and initialize the app-backend submodule tracking the correct branch or commit
      - name: Initialize app-backend as a submodule (specific branch or commit)
        run: |
          git submodule add https://$GITHUB_ACTOR:${{ secrets.APP_NEXT_ACCESS_TOKEN }}@github.com/aragon/app-backend.git ./app-backend || true
          cd ./app-backend
          git fetch origin ${{ github.event.client_payload.branch || 'feature/monitor' }}
          git checkout ${{ github.event.client_payload.branch || 'feature/monitor' }}
          cd ..
        env:
          GITHUB_ACTOR: ${{ github.actor }}

      # Step y: Install dependencies for app-backend
      - name: Install dependencies for app-backend
        run: |
          yarn install --frozen-lockfile
          cd ./app-backend && yarn install --frozen-lockfile

      # Step 4: Add and initialize the app-next submodule tracking the correct branch or commit
      - name: Initialize app-next as a submodule (specific branch or commit)
        run: |
          git submodule add https://$GITHUB_ACTOR:${{ secrets.APP_NEXT_ACCESS_TOKEN }}@github.com/aragon/app-next.git ./app-next || true
          cd ./app-next
          git fetch origin ${{ github.event.client_payload.branch || 'develop' }}
          git checkout ${{ github.event.client_payload.branch || 'develop' }}
          cd ..
        env:
          GITHUB_ACTOR: ${{ github.actor }}

      # Step 5: Parallel installation of dependencies for e2e-tests and app-next
      - name: Install dependencies for e2e-tests and app-next in parallel
        run: |
          npx concurrently \
            "yarn install --frozen-lockfile" \
            "cd ./app-next && yarn install --frozen-lockfile"

      # Step 6: Cache Node.js modules for App-Next (after submodule is initialized)
      - name: Cache Node.js modules for App-Next
        uses: actions/cache@v3
        with:
          path: ./app-next/node_modules
          key: app-next-${{ runner.os }}-${{ hashFiles('./app-next/yarn.lock') }}-node-20
          restore-keys: |
            app-next-${{ runner.os }}-
            app-next-
            node_modules

      # Step 7: Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      # Step 8 and Step 9 combined: Install Playwright Browsers and Build Synpress Cache in Parallel
      - name: Install Playwright Browsers and Build Synpress Cache in Parallel
        run: |
          npx concurrently \
            "npx playwright install chromium --with-deps" \
            "xvfb-run npx synpress ./tests/"
        env:
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}

      - name: Start App-Backend Development Server
        working-directory: ./app-backend
        # run: SERVICES_ARAGON_API_PORT=4000 npx ts-node -r dotenv/config -r tsconfig-paths/register runners/aragon-api.ts
        run: |
          SERVICES_ARAGON_API_PORT=4000 npx ts-node -r dotenv/config -r tsconfig-paths/register runners/aragon-api.ts > backend.log 2>&1 &
          echo "Development server started in the background."
        timeout-minutes: 5
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
          PORT: ${{ secrets.PORT }}
          COVALENT_API_KEY: ${{ secrets.COVALENT_API_KEY }}
          MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          LOG_LOGZIO_KEY: ${{ secrets.LOG_LOGZIO_KEY }}
          LOG_LOGZIO_HOST: ${{ secrets.LOG_LOGZIO_HOST }}
          LOGZIO_SERVER_NAME: ${{ secrets.LOGZIO_SERVER_NAME }}

      # Step y: Wait for App-Backend server to be ready
      # - name: Wait for App-Backend server to be ready
      #   # run: |
      #   #   until curl --output /dev/null --silent --head --fail http://localhost:4000; do
      #   #     echo "Waiting for the backend server to start on port 4000..."
      #   #     sleep 5
      #   #   done
      #   run: |
      #     until curl --output /dev/null --silent --fail http://localhost:4000/health; do
      #       echo "Waiting for the backend server to start on port 4000..."
      #       sleep 5
      #     done
      #   timeout-minutes: 5

      # Step 10: Start App-Next Development Server with timeout
      - name: Start App-Next Development Server
        working-directory: ./app-next
        # run: NEXT_PUBLIC_ARAGAGON_BACKEND_URL=http://localhost:4000/ yarn dev &
        run: yarn dev &
        timeout-minutes: 5
        env:
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Step 11: Wait for App-Next server to be ready
      - name: Wait for App-Next server to be ready
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:3000; do
            echo "Waiting for the server to start..."
            sleep 5
          done

      # Step 12: Run E2E tests with Playwright
      - name: Run E2E tests with Playwright
        run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium
        env:
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Step 13: Upload Playwright Report as Artifact (save for every run)
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Step 14: Upload Playwright Artifacts for Debugging (if failure occurs)
      - name: Upload Playwright Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: playwright-artifacts/

      # Step 15: Cleanup after tests
      - name: Cleanup unnecessary files after tests
        run: rm -rf ./app-next/node_modules ./build ./tmp
