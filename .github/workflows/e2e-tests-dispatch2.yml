# name: Playwright and Synpress Tests for PRs, Pushes, and Dispatch Events

# on:
#   # pull_request:
#   #   branches:
#   #     - develop
#   #   types: [opened, synchronize, reopened]
#   # push:
#   #   branches:
#   #     - develop
#   repository_dispatch:
#     types:
#       - app-next-develop-push

# jobs:
#   test:
#     timeout-minutes: 60
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the e2e-tests Repository (this repository)
#       - name: Checkout e2e-tests Repository
#         uses: actions/checkout@v4

#       - uses: actions/setup-node@v4
#         with:
#           node-version: lts/*

#       # Step 2: Install dependencies for the e2e-tests repository
#       - name: Install e2e-tests dependencies
#         run: yarn install

#       - name: Install Playwright Browsers
#         run: npx playwright install --with-deps

#       # Step to build the cache for Synpress
#       - name: Build Synpress cache
#         run: xvfb-run npx synpress ./tests/

#       # Step 3: Checkout the develop branch of the app-next Repository
#       - name: Checkout App-Next Repository
#         uses: actions/checkout@v4
#         with:
#           repository: aragon/app-next
#           ref: ${{ github.event.pull_request.head.ref || github.ref }}
#           token: ${{ secrets.APP_NEXT_ACCESS_TOKEN }}

#       # Step 7: Setup Node.js for the App-Next Working Directory
#       # This step ensures Node.js is configured correctly for the app-next directory.
#       - name: Setup Node.js for App-Next
#         uses: actions/setup-node@v4
#         with:
#           node-version: lts/*
#           working-directory: ./app-next

#       # Step 4: Install dependencies for the App-Next repository
#       - name: Install dependencies for App-Next
#         working-directory: ./app-next
#         run: yarn install

#       # Step 5: Run 'yarn dev' for App-Next (Start Development Server)
#       - name: Start App-Next Development Server
#         working-directory: ./app-next
#         run: yarn dev &
#         env:
#           NODE_ENV: development

#       # Step 5: Run E2E Tests with Playwright (including server startup)
#       - name: Run E2E tests (Playwright with server)
#         run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium
#         continue-on-error: true

#       # Step 6: Upload Playwright Report as Artifact
#       - name: Upload Playwright Report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: playwright-report
#           path: playwright-report/
#           retention-days: 30

name: Playwright and Synpress Tests for PRs, Pushes, and Dispatch Events

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - app-next-develop-push

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the app-next Repository
      - name: Checkout App-Next Repository
        uses: actions/checkout@v4
        with:
          repository: aragon/app-next
          # ref: ${{ github.event.pull_request.head.ref || github.ref }}
          ref: develop # Use 'develop', 'main', or the branch you're sure exists
          token: ${{ secrets.APP_NEXT_ACCESS_TOKEN }}
          path: ./app-next

      - name: Check if app-next directory exists
        run: ls -la ./app-next

      - name: Check if app-next directory exists
        run: ls -la ./

      # Step 2: Cache Node.js dependencies for App-Next
      # - name: Cache Node.js modules for App-Next
      #   uses: actions/cache@v3
      #   with:
      #     path: ./app-next/node_modules
      #     key: app-next-${{ runner.os }}-${{ hashFiles('./app-next/yarn.lock') }}
      #     restore-keys: |
      #       app-next-${{ runner.os }}-

      # Step 3: Setup Node.js for the App-Next Working Directory
      - name: Setup Node.js for App-Next
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Step 4: Install dependencies for the App-Next repository
      - name: Install dependencies for App-Next
        working-directory: ./app-next
        run: yarn install

      # Step 5: Cache Playwright Browsers for App-Next
      # - name: Cache Playwright Browsers for App-Next
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: playwright-${{ runner.os }}-${{ hashFiles('./app-next/playwright.config.js') }}
      #     restore-keys: |
      #       playwright-${{ runner.os }}-
      # Step 5: Run 'yarn dev' for App-Next (Start Development Server)
      - name: Start App-Next Development Server
        working-directory: ./app-next
        run: yarn dev &
      # run: yarn dev --host 0.0.0.0 &
      # env:
      #   NODE_ENV: development

      # Step 6: Checkout the e2e-tests Repository (this repository)
      - name: Checkout e2e-tests Repository
        uses: actions/checkout@v4
        with:
          path: ./ # Place the e2e-tests repository in the root directory

      - name: Check if e2e-tests files exist in the root directory
        run: ls -la ./

      # Step 7: Cache Node.js dependencies for e2e-tests
      # - name: Cache Node.js modules for e2e-tests
      #   uses: actions/cache@v3
      #   with:
      #     path: node_modules
      #     key: e2e-tests-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       e2e-tests-${{ runner.os }}-

      # Step 8: Setup Node.js for e2e-tests
      - name: Setup Node.js for e2e-tests
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Step 9: Install dependencies for the e2e-tests repository
      - name: Install dependencies for e2e-tests
        run: yarn install

      - name: Check Synpress installation
        run: yarn list

      # Step 10: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps

      # Step 11: Cache Synpress node_modules (Optional, if Synpress is being installed separately)
      # - name: Cache Synpress Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ./node_modules
      #     key: synpress-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       synpress-${{ runner.os }}-

      # Step 12: Build Synpress cache (if needed)
      - name: Build Synpress cache
        run: xvfb-run npx synpress ./tests/
        env:
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}

      # Step 11: Start Server in ./app-next and Run E2E Tests in Root
      # - name: Start Server and Run E2E Tests
      #   run: |
      #     npx concurrently --kill-others \
      #       "cd ./app-next && yarn dev" \
      #       "sleep 20 && xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium --debug --trace on"
      #   continue-on-error: true
      # - name: Check if app-next directory exists
      #   run: ls -la ./app-next

      # - name: Start App-Next Development Server
      #   run: yarn dev &
      #   working-directory: ./app-next
      - name: Check if app-next directory exists
        run: ls -la ./

      - name: Check contents of app-next before running Playwright
        run: ls -la ./app-next

      # Step 13: Run E2E Tests with Playwright (including server startup)
      - name: Run E2E tests (Playwright with server)
        # run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium --debug --trace on
        run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium
        # run: npx concurrently --kill-others "cd ./app-next && yarn dev" "sleep 20 && yarn playwright test ./tests/multisig-plugin/02_publishProposal.spec.ts --project=chromium"
        env:
          DEBUG: pw:browser*
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
        continue-on-error: true

      # Step 14: Upload Playwright Report as Artifact
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
