name: App Frontend Scheduled E2E Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # Run every hour

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        environment: [local, develop, staging, production] # Test in multiple environments

    steps:
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Checkout the app-qa repository
      - name: Checkout app-qa Repository
        uses: actions/checkout@v4
        with:
          path: ./

      # Cache Node.js dependencies for e2e-tests
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: e2e-tests-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-node-20
          restore-keys: |
            e2e-tests-${{ runner.os }}-
            e2e-tests-
            node_modules

      # Initialize app-next submodule for local environment
      - name: Initialize app-next submodule
        if: ${{ matrix.environment == 'local' }}
        run: |
          git submodule add https://$GITHUB_ACTOR:${{ secrets.APP_NEXT_ACCESS_TOKEN }}@github.com/aragon/app-next.git ./app-next || true
          cd ./app-next
          git checkout develop
          git pull origin develop
          cd ..
        env:
          GITHUB_ACTOR: ${{ github.actor }}

      # Install dependencies for app-qa
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Install dependencies for app-next in local environment
      - name: Install app-next dependencies
        if: ${{ matrix.environment == 'local' }}
        working-directory: ./app-next
        run: yarn install --frozen-lockfile

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      # Install Playwright browsers and build Synpress cache in parallel
      - name: Install Playwright Browsers and Build Synpress Cache
        run: |
          npx concurrently \
            "npx playwright install chromium --with-deps" \
            "xvfb-run npx synpress ./tests/"
        env:
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}

      # Start app-next server for local environment
      - name: Start app-next server
        if: ${{ matrix.environment == 'local' }}
        working-directory: ./app-next
        run: yarn dev &
        timeout-minutes: 5
        env:
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Wait for app-next server to be ready for local environment
      - name: Wait for app-next server
        if: ${{ matrix.environment == 'local' }}
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:3000; do
            echo "Waiting for the server to start..."
            sleep 5
          done

      # Run Playwright E2E tests
      - name: Run E2E tests
        run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal2.spec.ts --project=chromium
        env:
          TEST_ENV: ${{ matrix.environment }}
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Upload Playwright report as artifact
      - name: Upload Playwright Report
        if: always()
        id: upload_report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.environment }}
          path: playwright-report/
          retention-days: 30

      # Notify Discord on failure
      - name: Notify Discord
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ARTIFACT_URL: ${{ steps.upload_report.outputs.artifact-url }}
        run: |
          echo "Sending Discord failure notification..."
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "‚ùå E2E Tests Failed",
              "color": 15158332,
              "fields": [
                { "name": "Repository", "value": "${{ github.repository }}", "inline": false },
                { "name": "Workflow", "value": "${{ github.workflow }}", "inline": false },
                { "name": "Branch", "value": "${{ github.ref }}", "inline": false },
                { "name": "Environment", "value": "${{ matrix.environment }}", "inline": false },
                { "name": "Artifact Download URL", "value": "[Download Playwright Report]($ARTIFACT_URL)", "inline": false },
                { "name": "Details", "value": "[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false }
              ],
              "timestamp": "$(date --utc +%FT%TZ)"
            }]
          }
          EOF

          curl -X POST -H "Content-Type: application/json" -d @payload.json $DISCORD_WEBHOOK_URL
          echo "Discord notification sent."

      # Cleanup temporary files
      - name: Cleanup temporary files
        run: rm -rf ./app-next/node_modules ./build ./tmp
