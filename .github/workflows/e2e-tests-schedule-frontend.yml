name: App Frontend Scheduled E2E Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # Triggers the workflow every hour

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        environment: [local, develop, staging, production] # Add all environments to the matrix

    steps:
      # Step 1: Setup Node.js (Explicit versioning, Node.js 20 or higher)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Upgrade to Node.js 20 to satisfy Playwright and concurrently requirements

      # Step 2: Checkout the e2e-tests Repository
      - name: Checkout e2e-tests Repository
        uses: actions/checkout@v4
        with:
          path: ./ # Place the e2e-tests repository in the root directory

      # Step 3: Cache Node.js modules for e2e-tests
      - name: Cache Node.js modules for e2e-tests
        uses: actions/cache@v3
        with:
          path: node_modules
          key: e2e-tests-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-node-20
          restore-keys: |
            e2e-tests-${{ runner.os }}-
            e2e-tests-
            node_modules

      # Step 4: Add and initialize the app-next submodule (Only for Local)
      - name: Initialize app-next as a submodule (develop branch)
        if: ${{ matrix.environment == 'local' }}
        run: |
          git submodule add https://$GITHUB_ACTOR:${{ secrets.APP_NEXT_ACCESS_TOKEN }}@github.com/aragon/app-next.git ./app-next || true
          cd ./app-next
          git checkout develop
          git pull origin develop
          cd ..
        env:
          GITHUB_ACTOR: ${{ github.actor }}

      # Step 5: Install dependencies for e2e-tests
      - name: Install dependencies for e2e-tests
        run: yarn install --frozen-lockfile

      # Step 6: Install Dependencies for App-Next
      - name: Install dependencies for app-next
        if: ${{ matrix.environment == 'local' }}
        working-directory: ./app-next
        run: yarn install --frozen-lockfile

      # Step 7: Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      # Step 8 and Step 9 combined: Install Playwright Browsers and Build Synpress Cache in Parallel
      - name: Install Playwright Browsers and Build Synpress Cache in Parallel
        run: |
          npx concurrently \
            "npx playwright install chromium --with-deps" \
            "xvfb-run npx synpress ./tests/"
        env:
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}

      # Step 10: Start App-Next Development Server (Only for Local)
      - name: Start App-Next Development Server
        if: ${{ matrix.environment == 'local' }}
        working-directory: ./app-next
        run: yarn dev &
        timeout-minutes: 5 # Ensure server doesn't hang indefinitely
        env:
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Step 11: Wait for App-Next server to be ready (Only for Local)
      - name: Wait for App-Next server to be ready
        if: ${{ matrix.environment == 'local' }}
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:3000; do
            echo "Waiting for the server to start..."
            sleep 5
          done

      # Step 12: Run E2E tests with Playwright
      - name: Run E2E tests with Playwright
        run: xvfb-run yarn playwright test ./tests/multisig-plugin/02_publishProposal2.spec.ts --project=chromium
        # run: |
        #   mkdir -p ./user_data_${{ matrix.environment }}
        #   xvfb-run yarn playwright test --project=chromium --config=playwright.config.ts --user-data-dir=./user_data_${{ matrix.environment }}
        env:
          TEST_ENV: ${{ matrix.environment }}
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Step 13: Upload Playwright Report as Artifact (save for every run)
      - name: Upload Playwright Report
        if: always() # Save the artifact regardless of success or failure
        id: upload_report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.environment }}
          path: playwright-report/
          retention-days: 30

      # Step 14: Upload Playwright Artifacts for Debugging (if failure occurs)
      - name: Upload Playwright Artifacts on Failure
        if: failure()
        # id: upload_report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts-${{ matrix.environment }}
          path: playwright-artifacts/

      - name: Log Upload Report Outputs
        # if: failure()
        run: |
          echo "Artifact ID: ${{ steps.upload_report.outputs.artifact-id }}"
          echo "Artifact URL: ${{ steps.upload_report.outputs.artifact-url }}"

      # Step 15: Cleanup after tests
      - name: Cleanup unnecessary files after tests
        run: rm -rf ./app-next/node_modules ./build ./tmp # Remove unnecessary files

      # # Step 16: Notify Discord on Failure
      # - name: Notify Discord on Failure
      #   # if: failure()
      #   env:
      #     DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #         -d '{
      #               "embeds": [{
      #                 "title": "‚ùå E2E Tests Failed",
      #                 "color": 15158332,
      #                 "fields": [
      #                   { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": false },
      #                   { "name": "Workflow", "value": "'"${{ github.workflow }}"'", "inline": false },
      #                   { "name": "Job", "value": "'"${{ github.job }}"'", "inline": false },
      #                   { "name": "Branch", "value": "'"${{ github.ref }}"'", "inline": false },
      #                   { "name": "Environment", "value": "'"${{ matrix.environment }}"'", "inline": false },
      #                   { "name": "Details", "value": "[View Workflow Run](${{
      #                     github.server_url
      #                   { "name": "Artifact Download URL", "value": "[Download Artifact](${{ steps.get_artifact.outputs.download_url }})", "inline": false },
      #                   }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false }
      #                 ],
      #                 "timestamp": "'"$(date --utc +%FT%TZ)"'"
      #               }]
      #             }' \
      #         $DISCORD_WEBHOOK_URL
      #   shell: bash

      # Step 16: Notify Discord on Failure
      - name: Notify Discord on Failure
        # if: failure() # Ensure this step runs only on failure
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PLAYWRIGHT_REPORT_BASE_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          WORKFLOW_RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          echo "Sending Discord failure notification..."

          curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "embeds": [{
                      "title": "‚ùå E2E Tests Failed",
                      "color": 15158332,
                      "fields": [
                        { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": false },
                        { "name": "Workflow", "value": "'"${{ github.workflow }}"'", "inline": false },
                        { "name": "Job", "value": "'"${{ github.job }}"'", "inline": false },
                        { "name": "Branch", "value": "'"${{ github.ref }}"'", "inline": false },
                        { "name": "Environment", "value": "'"${{ matrix.environment }}"'", "inline": false },
                        { "name": "Artifact Download URLs", "value": "üìÇ [Playwright Report - Local](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-local)\nüìÇ [Playwright Report - Develop](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-develop)\nüìÇ [Playwright Report - Staging](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-staging)\nüìÇ [Playwright Report - Production](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-production)", "inline": false },
                        { "name": "Details", "value": "[View Workflow Run](${WORKFLOW_RUN_URL})", "inline": false }
                      ],
                      "timestamp": "'"$(date --utc +%FT%TZ)"'"
                    }]
                  }' \
              $DISCORD_WEBHOOK_URL
          echo "Discord failure notification sent."

      # Step 16: Notify Discord on Failure
      - name: Notify Discord on Failure
        # if: failure() # Ensure this step runs only on failure
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PLAYWRIGHT_REPORT_BASE_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          WORKFLOW_RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          echo "Sending Discord failure notification..."

          # Prepare the JSON payload
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "‚ùå E2E Tests Succeeded",
              "color": 15158332,
              "fields": [
                { "name": "Repository", "value": "${{ github.repository }}", "inline": false },
                { "name": "Workflow", "value": "${{ github.workflow }}", "inline": false },
                { "name": "Job", "value": "${{ github.job }}", "inline": false },
                { "name": "Branch", "value": "${{ github.ref }}", "inline": false },
                { "name": "Environment", "value": "${{ matrix.environment }}", "inline": false },
                { "name": "Artifact Download URLs", "value": "üìÇ [Playwright Report - Local](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-local)\nüìÇ [Playwright Report - Develop](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-develop)\nüìÇ [Playwright Report - Staging](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-staging)\nüìÇ [Playwright Report - Production](${PLAYWRIGHT_REPORT_BASE_URL}/playwright-report-production)", "inline": false },
                { "name": "Details", "value": "[View Workflow Run](${WORKFLOW_RUN_URL})", "inline": false }
              ],
              "timestamp": "$(date --utc +%FT%TZ)"
            }]
          }
          EOF

          # Send the notification
          curl -X POST -H "Content-Type: application/json" \
               -d @payload.json \
               $DISCORD_WEBHOOK_URL

      - name: Notify Discord on Failure
        # if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ARTIFACT_URL: ${{ steps.upload_report.outputs.artifact-url }}
        run: |
          echo "Sending Discord failure notification..."

          # Construct the JSON payload using a here document
          read -r -d '' PAYLOAD <<EOF
          {
            "embeds": [{
              "title": "‚ùå E2E Tests Failed2",
              "color": 15158332,
              "fields": [
                { "name": "Repository", "value": "${{ github.repository }}", "inline": false },
                { "name": "Workflow", "value": "${{ github.workflow }}", "inline": false },
                { "name": "Job", "value": "${{ github.job }}", "inline": false },
                { "name": "Branch", "value": "${{ github.ref }}", "inline": false },
                { "name": "Environment", "value": "${{ matrix.environment }}", "inline": false },
                { "name": "Artifact Download URL", "value": "[Download Playwright Report](${ARTIFACT_URL})", "inline": false },
                { "name": "Details", "value": "[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false }
              ],
              "timestamp": "$(date --utc +%FT%TZ)"
            }]
          }
          EOF

          # Send the payload to Discord
          curl -X POST -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              $DISCORD_WEBHOOK_URL

          echo "Discord failure notification sent."

      - name: Notify Discord on Failure
        # if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ARTIFACT_URL: ${{ steps.upload_report.outputs.artifact-url }}
        run: |
          echo "Sending Discord failure notification..."

          # Construct the JSON payload using a here document
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "‚ùå E2E Tests Failed3",
              "color": 15158332,
              "fields": [
                { "name": "Repository", "value": "${{ github.repository }}", "inline": false },
                { "name": "Workflow", "value": "${{ github.workflow }}", "inline": false },
                { "name": "Job", "value": "${{ github.job }}", "inline": false },
                { "name": "Branch", "value": "${{ github.ref }}", "inline": false },
                { "name": "Environment", "value": "${{ matrix.environment }}", "inline": false },
                { "name": "Artifact Download URL", "value": "[Download Playwright Report]($ARTIFACT_URL)", "inline": false },
                { "name": "Details", "value": "[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false }
              ],
              "timestamp": "$(date --utc +%FT%TZ)"
            }]
          }
          EOF

          # Send the payload to Discord
          curl -X POST -H "Content-Type: application/json" \
              -d @payload.json \
              $DISCORD_WEBHOOK_URL

          echo "Discord failure notification sent."
