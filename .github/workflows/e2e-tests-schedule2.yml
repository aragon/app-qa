name: E2E Tests on Scheduled Runs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3,15 * * *" # Triggers the workflow every day at 3:00 AM and 3:00 PM UTC

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        environment: [local, staging, production] # Define environments

    steps:
      # Step 1: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Upgrade to Node.js 20 to satisfy Playwright and concurrently requirements

      # Step 2: Checkout the e2e-tests Repository
      - name: Checkout e2e-tests Repository
        uses: actions/checkout@v4
        with:
          path: ./ # Place the e2e-tests repository in the root directory

      # Step 3: Cache Node.js modules for e2e-tests
      - name: Cache Node.js modules for e2e-tests
        uses: actions/cache@v3
        with:
          path: node_modules
          key: e2e-tests-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-node-20
          restore-keys: |
            e2e-tests-${{ runner.os }}-
            e2e-tests-
            node_modules

      # Step 4: Add and initialize the app-next submodule tracking the develop branch (with token authentication)
      - name: Initialize app-next as a submodule (develop branch)
        run: |
          git submodule add https://$GITHUB_ACTOR:${{ secrets.APP_NEXT_ACCESS_TOKEN }}@github.com/aragon/app-next.git ./app-next || true
          cd ./app-next
          git checkout develop
          git pull origin develop
          cd ..
        env:
          GITHUB_ACTOR: ${{ github.actor }}

      # Step 5: Parallel installation of dependencies for e2e-tests and app-next
      - name: Install dependencies for e2e-tests and app-next in parallel
        run: |
          npx concurrently \
            "yarn install --frozen-lockfile" \
            "cd ./app-next && yarn install --frozen-lockfile"

      # Step 6: Cache Node.js modules for App-Next (after submodule is initialized)
      - name: Cache Node.js modules for App-Next
        uses: actions/cache@v3
        with:
          path: ./app-next/node_modules
          key: app-next-${{ runner.os }}-${{ hashFiles('./app-next/yarn.lock') }}-node-20
          restore-keys: |
            app-next-${{ runner.os }}-
            app-next-
            node_modules

      # Step 7: Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      # Step 8: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps

      # Step 9: Set Environment-Specific Variables
      - name: Set Environment Variables
        run: echo "TEST_ENV=${{ matrix.environment }}" >> $GITHUB_ENV

      # Step 10: Run E2E tests with Playwright
      - name: Run E2E tests with Playwright
        run: xvfb-run yarn playwright test --project=chromium
        env:
          TEST_ENV: ${{ matrix.environment }}
          METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
          METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
          NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      # Step 11: Upload Playwright Report as Artifact (save for every run)
      - name: Upload Playwright Report
        if: always() # Save the artifact regardless of success or failure
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.environment }}
          path: playwright-report/
          retention-days: 30

      # Step 12: Upload Playwright Artifacts for Debugging (if failure occurs)
      - name: Upload Playwright Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts-${{ matrix.environment }}
          path: playwright-artifacts/

      # Step 13: Cleanup after tests
      - name: Cleanup unnecessary files after tests
        run: rm -rf ./app-next/node_modules ./build ./tmp
