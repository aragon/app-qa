name: App E2E Tests - Dispatched

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to run the E2E tests for"
        required: true
        type: choice
        options:
          - "development"
          - "dev"
          - "staging"
          - "stg"
          - "production"
          - "prod"
      metric_test:
        description: "Numeric input for test level"
        required: true
        default: 1
  repository_dispatch:
    types: ["app_e2e_tests_dispatched"]

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || github.event.client_payload.environment || 'development' }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Checkout app-qa repository
        uses: actions/checkout@v4
        with:
          path: ./

      #- name: Cache Node.js dependencies
      #  uses: actions/cache@v3
      #  with:
      #    path: node_modules
      #    key: app-qa-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-node-20
      #    restore-keys: |
      #      app-qa-${{ runner.os }}-
      #      app-qa-
      #      node_modules
      #
      #- name: Install dependencies
      #  run: yarn install --frozen-lockfile
      #
      #- name: Cache Playwright browsers
      #  id: playwright-cache
      #  uses: actions/cache@v3
      #  with:
      #    path: ~/.cache/ms-playwright
      #    key: playwright-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('playwright.config.ts') }}
      #    restore-keys: |
      #      playwright-${{ runner.os }}-
      #      playwright-
      #
      #- name: Install Playwright browsers
      #  if: steps.playwright-cache.outputs.cache-hit != 'true' # Only run if cache is not found
      #  run: npx playwright install chromium --with-deps
      #
      #- name: Cache Synpress dependencies
      #  id: synpress-cache
      #  uses: actions/cache@v3
      #  with:
      #    path: .cache-synpress
      #    key: synpress-${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}
      #    restore-keys: |
      #      synpress-${{ runner.os }}-
      #      synpress-
      #
      #- name: Build Synpress dependencies
      #  if: steps.synpress-cache.outputs.cache-hit != 'true'
      #  run: xvfb-run npx synpress ./tests/helpers/
      #  env:
      #    METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
      #    METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
      - name: Run E2E tests
        id: run_e2e_tests
        run: |
          set -x 
          exit ${{ github.event.inputs.metric_test }}
        #run: xvfb-run yarn playwright test --project=chromium
        #env:
        #  TEST_ENV: ${{ env.ENVIRONMENT }}
        #  METAMASK_SEED_PHRASE: ${{ secrets.METAMASK_SEED_PHRASE }}
        #  METAMASK_PASSWORD: ${{ secrets.METAMASK_PASSWORD }}
        #  NEXT_SECRET_IPFS_JWT: ${{ secrets.NEXT_SECRET_IPFS_JWT }}

      - name: Upload Playwright report
        if: always()
        id: upload_report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ env.ENVIRONMENT }}
          path: playwright-report/
          retention-days: 30

      - name: Push metrics to grafana
        if: always()
        run: |
          #!/bin/bash
          set -x

          ############
          # URL VARS #
          ############
          monitor_endpoint_url="https://monitor.aragon.in/victoria/api/v1/import/prometheus"
          monitor_endpoint_apikey="SECRETVALUE_victoria_metrics_apikey"
          monitor_metric_name="github_actions"
          monitor_timestamp=$(date +%s000)

          #######################
          # Metric (Modify this)#
          #######################

          #Numeric metric Value. This one will be used for alerting
          ## 0 ->   everything went correct
          ## >0 ->  something went bad (probably it will trigger an alert)
          case "${{ steps.run_e2e_tests.outcome }}" in
            "success")
              METRIC_VALUE=0
              ;;
            "failure")
              METRIC_VALUE=1
              ;;
            "cancelled")
              METRIC_VALUE=1
              ;;
            "skipped")
              METRIC_VALUE=1
              ;;
            *)
              METRIC_VALUE=1
              ;;
          esac


          ############################
          # File with all the labels #
          ############################
          cat << EOF > metrics_labels

          # Monitor variables
          monitor_version="v0.1" #Metric used to differentiate between several metric configs

          # Github metadata
          github_ref_name="${{ github.ref_name }}" #name of the branch
          github_ref_sha="${{ github.sha }}" #hash of the branch used by workflow
          github_workflow_ref="${{github.workflow_ref}}" ##full ref, with repo, workflow path..
          github_event_name="${{ github.event_name }}" ##Tells you if it was launched using trigger, cron, pr...
          github_runid="${{github.run_id}}" #Unique workflow run, changes on each execution
          github_workflow_name="${{ github.workflow }}"

          ########################################
          # Labels to be specified (Modify this) #
          ########################################

          # Project Variables
          environment="${{env.ENVIRONMENT}}" # previ,dev,stg,prod
          project="app-next" #app-next, backend2, infra...
          subproject="e2e-test" #To be able to make categories if needed

          #Extras Labels
          ## Here you can add all the labels you want to use
          ## Remember to add them to the url. i.e:
          test_result_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          test_error_message="Test failed"

          EOF

          ########################################
          # Pre-processing and sending the query #
          ########################################

          sed -i 's/#.*//' metrics_labels #remove all commented lines and commentaries
          sed -i 's/[[:space:]]*$//' metrics_labels # remove all trailing whitespaces from each line
          sed -i '/^$/d' metrics_labels # remove empty lines

          cat << EOF >curl_test
          curl -X POST \
            -H "X-API-Key: SECRETVALUE_victoria_metrics_apikey" \
            -H "Content-Type: text/plain" \
            "${monitor_endpoint_url}" \
            -d "${monitor_metric_name}{$(awk -F= '/^[^#]/ {gsub(/"/, "", $2); printf "%s=\\\"%s\\\", \\\n", $1, $2}' metrics_labels)
          } ${METRIC_VALUE}"

          EOF

          bash curl_test

      - name: Notify Discord
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ARTIFACT_URL: ${{ steps.upload_report.outputs.artifact-url }}
        run: |
          echo "Sending Discord failure notification..."
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "‚ùå E2E Tests Failed",
              "color": 15158332,
              "fields": [
                { "name": "Repository", "value": "${{ github.repository }}", "inline": false },
                { "name": "Workflow", "value": "${{ github.workflow }}", "inline": false },
                { "name": "Branch", "value": "${{ github.ref }}", "inline": false },
                { "name": "Environment", "value": "${{ env.ENVIRONMENT }}", "inline": false },
                { "name": "Artifact Download URL", "value": "[Download Playwright Report]($ARTIFACT_URL)", "inline": false },
                { "name": "Details", "value": "[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false }
              ],
              "timestamp": "$(date --utc +%FT%TZ)"
            }]
          }
          EOF

          curl -X POST -H "Content-Type: application/json" -d @payload.json $DISCORD_WEBHOOK_URL
          echo "Discord notification sent."

      - name: Cleanup temporary files
        run: rm -rf ./app-next/node_modules ./build ./tmp
